"use strict";function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(a,b){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a)){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{d||null==h["return"]||h["return"]()}finally{if(e)throw f}}return c}}function _arrayWithHoles(a){if(Array.isArray(a))return a}var Sim=["Cosine","DiceCoefficient","JaccardIndex","Levenshtein","LongestCommonSubsequence","MetricLCS"],_Sim$map=Sim.map(function(a){return require("./main/packages/".concat(a))}),_Sim$map2=_slicedToArray(_Sim$map,6),Cosine=_Sim$map2[0],DiceCoefficient=_Sim$map2[1],JaccardIndex=_Sim$map2[2],Levenshtein=_Sim$map2[3],LongestCommonSubsequence=_Sim$map2[4],MetricLCS=_Sim$map2[5];module.exports={cosine:new Cosine,diceCoefficient:new DiceCoefficient,jaccardIndex:new JaccardIndex,levenshtein:new Levenshtein,lcs:new LongestCommonSubsequence,mlcs:new MetricLCS};